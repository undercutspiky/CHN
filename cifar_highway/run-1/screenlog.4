reenlog.0
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ python master.py 
Number of training examples : 40000
1009.0 1997.0
For epoch 1 	Accuracy on valid set: 34.630000 %
1028.0 1351.0
For epoch 2 	Accuracy on valid set: 51.280000 %
1046.0 1204.0
For epoch 3 	Accuracy on valid set: 64.950000 %
1060.0 1183.0
For epoch 4 	Accuracy on valid set: 64.930000 %
1073.0 1180.0
For epoch 5 	Accuracy on valid set: 72.070000 %
1072.0 1190.0
For epoch 6 	Accuracy on valid set: 79.820000 %
1074.0 1178.0
For epoch 7 	Accuracy on valid set: 81.130000 %
1086.0 1167.0
For epoch 8 	Accuracy on valid set: 81.500000 %
1095.0 1170.0
For epoch 9 	Accuracy on valid set: 81.800000 %
1103.0 1173.0
For epoch 10 	Accuracy on valid set: 81.290000 %
1109.0 1169.0
For epoch 11 	Accuracy on valid set: 83.200000 %
1119.0 1174.0
For epoch 12 	Accuracy on valid set: 84.540000 %
1127.0 1183.0
For epoch 13 	Accuracy on valid set: 81.260000 %
1141.0 1190.0
For epoch 14 	Accuracy on valid set: 82.710000 %
1152.0 1197.0
For epoch 15 	Accuracy on valid set: 79.700000 %
1159.0 1201.0
For epoch 16 	Accuracy on valid set: 82.800000 %
1175.0 1210.0
For epoch 17 	Accuracy on valid set: 83.190000 %
1184.0 1213.0
For epoch 18 	Accuracy on valid set: 84.630000 %
1198.0 1234.0
For epoch 19 	Accuracy on valid set: 84.860000 %
1208.0 1243.0
For epoch 20 	Accuracy on valid set: 83.010000 %
941.0 1239.0
For epoch 21 	Accuracy on valid set: 81.590000 %
763.0 944.0
For epoch 22 	Accuracy on valid set: 83.080000 %
626.0 765.0
For epoch 23 	Accuracy on valid set: 80.570000 %
524.0 629.0
For epoch 24 	Accuracy on valid set: 82.470000 %
426.0 525.0
For epoch 25 	Accuracy on valid set: 72.310000 %
363.0 430.0
For epoch 26 	Accuracy on valid set: 84.700000 %
319.0 363.0
For epoch 27 	Accuracy on valid set: 77.690000 %
289.0 322.0
For epoch 28 	Accuracy on valid set: 80.760000 %
267.0 293.0
For epoch 29 	Accuracy on valid set: 77.280000 %
249.0 271.0
For epoch 30 	Accuracy on valid set: 75.620000 %
235.0 251.0
For epoch 31 	Accuracy on valid set: 77.050000 %
224.0 236.0
For epoch 32 	Accuracy on valid set: 80.860000 %
211.0 226.0
For epoch 33 	Accuracy on valid set: 78.140000 %
205.0 216.0
For epoch 34 	Accuracy on valid set: 77.330000 %
198.0 209.0
For epoch 35 	Accuracy on valid set: 78.530000 %
191.0 202.0
For epoch 36 	Accuracy on valid set: 67.420000 %
184.0 196.0
For epoch 37 	Accuracy on valid set: 76.230000 %
181.0 191.0
For epoch 38 	Accuracy on valid set: 74.480000 %
176.0 186.0
For epoch 39 	Accuracy on valid set: 76.260000 %
172.0 181.0
For epoch 40 	Accuracy on valid set: 82.730000 %
168.0 177.0
For epoch 41 	Accuracy on valid set: 82.840000 %
167.0 177.0
For epoch 42 	Accuracy on valid set: 79.080000 %
165.0 173.0
For epoch 43 	Accuracy on valid set: 73.400000 %
162.0 172.0
For epoch 44 	Accuracy on valid set: 81.590000 %
160.0 169.0
For epoch 45 	Accuracy on valid set: 80.280000 %
158.0 169.0
For epoch 46 	Accuracy on valid set: 77.060000 %
156.0 165.0
For epoch 47 	Accuracy on valid set: 76.260000 %
157.0 162.0
For epoch 48 	Accuracy on valid set: 76.750000 %
153.0 162.0
For epoch 49 	Accuracy on valid set: 78.240000 %
151.0 159.0
For epoch 50 	Accuracy on valid set: 77.020000 %
150.0 159.0
For epoch 51 	Accuracy on valid set: 77.610000 %
149.0 158.0
For epoch 52 	Accuracy on valid set: 75.430000 %
147.0 155.0
For epoch 53 	Accuracy on valid set: 78.240000 %
148.0 155.0
For epoch 54 	Accuracy on valid set: 79.640000 %
145.0 154.0
For epoch 55 	Accuracy on valid set: 79.910000 %
142.0 155.0
For epoch 56 	Accuracy on valid set: 78.740000 %
143.0 151.0
For epoch 57 	Accuracy on valid set: 70.460000 %
143.0 150.0
For epoch 58 	Accuracy on valid set: 77.480000 %
143.0 149.0
For epoch 59 	Accuracy on valid set: 81.090000 %
140.0 148.0
For epoch 60 	Accuracy on valid set: 75.010000 %
140.0 151.0
For epoch 61 	Accuracy on valid set: 76.710000 %
141.0 148.0
For epoch 62 	Accuracy on valid set: 82.430000 %
139.0 146.0
For epoch 63 	Accuracy on valid set: 79.290000 %
137.0 146.0
For epoch 64 	Accuracy on valid set: 81.570000 %
136.0 144.0
For epoch 65 	Accuracy on valid set: 78.470000 %
135.0 144.0
For epoch 66 	Accuracy on valid set: 78.190000 %
136.0 145.0
For epoch 67 	Accuracy on valid set: 82.280000 %
135.0 142.0
For epoch 68 	Accuracy on valid set: 72.570000 %
132.0 142.0
For epoch 69 	Accuracy on valid set: 80.930000 %
134.0 142.0
For epoch 70 	Accuracy on valid set: 73.260000 %
134.0 142.0
For epoch 71 	Accuracy on valid set: 77.730000 %
132.0 139.0
For epoch 72 	Accuracy on valid set: 75.320000 %
133.0 141.0
For epoch 73 	Accuracy on valid set: 80.430000 %
132.0 139.0
For epoch 74 	Accuracy on valid set: 80.520000 %
129.0 140.0
For epoch 75 	Accuracy on valid set: 75.970000 %
130.0 139.0
For epoch 76 	Accuracy on valid set: 75.820000 %
128.0 138.0
For epoch 77 	Accuracy on valid set: 80.510000 %
127.0 136.0
For epoch 78 	Accuracy on valid set: 80.920000 %
128.0 135.0
For epoch 79 	Accuracy on valid set: 77.720000 %
106.0 131.0
For epoch 80 	Accuracy on valid set: 87.740000 %
92.0 107.0
For epoch 81 	Accuracy on valid set: 87.740000 %
84.0 93.0
For epoch 82 	Accuracy on valid set: 88.090000 %
78.0 84.0
For epoch 83 	Accuracy on valid set: 87.930000 %
74.0 79.0
For epoch 84 	Accuracy on valid set: 87.980000 %
71.0 75.0
For epoch 85 	Accuracy on valid set: 88.170000 %
69.0 72.0
For epoch 86 	Accuracy on valid set: 87.450000 %
67.0 70.0
For epoch 87 	Accuracy on valid set: 87.800000 %
65.0 68.0
For epoch 88 	Accuracy on valid set: 87.930000 %
64.0 66.0
For epoch 89 	Accuracy on valid set: 87.900000 %
63.0 65.0
For epoch 90 	Accuracy on valid set: 87.750000 %
61.0 63.0
For epoch 91 	Accuracy on valid set: 87.990000 %
60.0 62.0
For epoch 92 	Accuracy on valid set: 87.950000 %
59.0 61.0
For epoch 93 	Accuracy on valid set: 87.530000 %
59.0 60.0
For epoch 94 	Accuracy on valid set: 87.900000 %
58.0 60.0
For epoch 95 	Accuracy on valid set: 87.830000 %
58.0 59.0
For epoch 96 	Accuracy on valid set: 87.230000 %
57.0 58.0
For epoch 97 	Accuracy on valid set: 87.380000 %
57.0 58.0
For epoch 98 	Accuracy on valid set: 87.340000 %
56.0 58.0
For epoch 99 	Accuracy on valid set: 87.540000 %
56.0 57.0
For epoch 100 	Accuracy on valid set: 87.100000 %
55.0 57.0
For epoch 101 	Accuracy on valid set: 87.760000 %
55.0 56.0
For epoch 102 	Accuracy on valid set: 87.610000 %
55.0 56.0
For epoch 103 	Accuracy on valid set: 87.540000 %
55.0 56.0
For epoch 104 	Accuracy on valid set: 86.900000 %
54.0 56.0
For epoch 105 	Accuracy on valid set: 87.200000 %
54.0 55.0
For epoch 106 	Accuracy on valid set: 87.050000 %
54.0 55.0
For epoch 107 	Accuracy on valid set: 87.410000 %
54.0 55.0
For epoch 108 	Accuracy on valid set: 86.940000 %
54.0 55.0
For epoch 109 	Accuracy on valid set: 86.650000 %
53.0 54.0
For epoch 110 	Accuracy on valid set: 86.560000 %
53.0 54.0
For epoch 111 	Accuracy on valid set: 86.720000 %
53.0 54.0
For epoch 112 	Accuracy on valid set: 86.330000 %
53.0 54.0
For epoch 113 	Accuracy on valid set: 86.870000 %
53.0 54.0
For epoch 114 	Accuracy on valid set: 86.290000 %
52.0 54.0
For epoch 115 	Accuracy on valid set: 86.700000 %
52.0 53.0
For epoch 116 	Accuracy on valid set: 86.280000 %
52.0 53.0
For epoch 117 	Accuracy on valid set: 85.360000 %
52.0 53.0
For epoch 118 	Accuracy on valid set: 86.010000 %
52.0 53.0
For epoch 119 	Accuracy on valid set: 86.550000 %
51.0 52.0
For epoch 120 	Accuracy on valid set: 87.500000 %
51.0 52.0
For epoch 121 	Accuracy on valid set: 87.480000 %
51.0 52.0
For epoch 122 	Accuracy on valid set: 87.490000 %
51.0 52.0
For epoch 123 	Accuracy on valid set: 87.350000 %
51.0 52.0
For epoch 124 	Accuracy on valid set: 87.340000 %
51.0 52.0
For epoch 125 	Accuracy on valid set: 87.310000 %
51.0 52.0
For epoch 126 	Accuracy on valid set: 87.340000 %
51.0 51.0
For epoch 127 	Accuracy on valid set: 87.360000 %
51.0 51.0
For epoch 128 	Accuracy on valid set: 87.330000 %
51.0 51.0
For epoch 129 	Accuracy on valid set: 87.360000 %
51.0 51.0
For epoch 130 	Accuracy on valid set: 87.370000 %
51.0 51.0
For epoch 131 	Accuracy on valid set: 87.330000 %
51.0 51.0
For epoch 132 	Accuracy on valid set: 87.300000 %
50.0 51.0
For epoch 133 	Accuracy on valid set: 87.260000 %
50.0 51.0
For epoch 134 	Accuracy on valid set: 87.350000 %
50.0 51.0
For epoch 135 	Accuracy on valid set: 87.140000 %
50.0 51.0
For epoch 136 	Accuracy on valid set: 87.280000 %
50.0 51.0
For epoch 137 	Accuracy on valid set: 87.240000 %
50.0 51.0
For epoch 138 	Accuracy on valid set: 87.280000 %
50.0 51.0
For epoch 139 	Accuracy on valid set: 87.160000 %
50.0 51.0
For epoch 140 	Accuracy on valid set: 87.280000 %
50.0 51.0
For epoch 141 	Accuracy on valid set: 87.250000 %
50.0 51.0
For epoch 142 	Accuracy on valid set: 87.270000 %
50.0 51.0
For epoch 143 	Accuracy on valid set: 87.200000 %
50.0 51.0
For epoch 144 	Accuracy on valid set: 87.200000 %
50.0 51.0
For epoch 145 	Accuracy on valid set: 87.260000 %
50.0 51.0
For epoch 146 	Accuracy on valid set: 87.230000 %
50.0 51.0
For epoch 147 	Accuracy on valid set: 87.200000 %
50.0 51.0
For epoch 148 	Accuracy on valid set: 87.090000 %
50.0 51.0
For epoch 149 	Accuracy on valid set: 87.220000 %
Conv2d(256, 15, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 17 layer: 84.810000 %
45.0 47.0
Accuracy on valid after pruning and training for 1 epoch 17 layer onwards: 85.790000 %
Conv2d(256, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 16 layer: 52.250000 %
52.0 53.0
Accuracy on valid after pruning and training for 1 epoch 16 layer onwards: 86.300000 %
Conv2d(256, 73, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 15 layer: 27.370000 %
80.0 82.0
Accuracy on valid after pruning and training for 1 epoch 15 layer onwards: 86.240000 %
Conv2d(256, 50, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 14 layer: 11.930000 %
103.0 105.0
Accuracy on valid after pruning and training for 1 epoch 14 layer onwards: 85.660000 %
Conv2d(256, 141, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 13 layer: 9.800000 %
186.0 187.0
Accuracy on valid after pruning and training for 1 epoch 13 layer onwards: 80.020000 %
Conv2d(256, 164, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
Accuracy on valid set after pruning 12 layer: 9.800000 %
246.0 250.0
Accuracy on valid after pruning and training for 1 epoch 12 layer onwards: 70.860000 %
Conv2d(128, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 11 layer: 10.140000 %
251.0 255.0
Accuracy on valid after pruning and training for 1 epoch 11 layer onwards: 71.800000 %
Conv2d(128, 55, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 10 layer: 9.800000 %
276.0 280.0
Accuracy on valid after pruning and training for 1 epoch 10 layer onwards: 68.330000 %
Conv2d(128, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 9 layer: 9.800000 %
302.0 306.0
Accuracy on valid after pruning and training for 1 epoch 9 layer onwards: 60.660000 %
Conv2d(128, 107, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 8 layer: 9.800000 %
357.0 360.0
Accuracy on valid after pruning and training for 1 epoch 8 layer onwards: 54.450000 %
Conv2d(128, 122, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 7 layer: 10.140000 %
384.0 389.0
Accuracy on valid after pruning and training for 1 epoch 7 layer onwards: 49.850000 %
Conv2d(128, 86, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
Accuracy on valid set after pruning 6 layer: 9.800000 %
413.0 418.0
Accuracy on valid after pruning and training for 1 epoch 6 layer onwards: 54.570000 %
Conv2d(64, 52, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 5 layer: 9.800000 %
432.0 436.0
Accuracy on valid after pruning and training for 1 epoch 5 layer onwards: 51.910000 %
Conv2d(64, 49, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 4 layer: 9.800000 %
448.0 454.0
Accuracy on valid after pruning and training for 1 epoch 4 layer onwards: 52.040000 %
Conv2d(64, 55, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 3 layer: 9.800000 %
463.0 470.0
Accuracy on valid after pruning and training for 1 epoch 3 layer onwards: 54.850000 %
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 2 layer: 54.850000 %
463.0 469.0
Accuracy on valid after pruning and training for 1 epoch 2 layer onwards: 57.950000 %
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 1 layer: 57.950000 %
463.0 469.0
Accuracy on valid after pruning and training for 1 epoch 1 layer onwards: 60.360000 %
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 0 layer: 60.360000 %
463.0 469.0
Accuracy on valid after pruning and training for 1 epoch 0 layer onwards: 62.140000 %
463.0 470.0
For epoch 150 	Accuracy on valid set: 64.970000 %
464.0 469.0
For epoch 151 	Accuracy on valid set: 66.550000 %
465.0 470.0
For epoch 152 	Accuracy on valid set: 67.510000 %
465.0 470.0
For epoch 153 	Accuracy on valid set: 68.460000 %
465.0 471.0
For epoch 154 	Accuracy on valid set: 69.320000 %
466.0 470.0
For epoch 155 	Accuracy on valid set: 69.960000 %
466.0 471.0
For epoch 156 	Accuracy on valid set: 70.760000 %
466.0 471.0
For epoch 157 	Accuracy on valid set: 71.140000 %
466.0 471.0
For epoch 158 	Accuracy on valid set: 71.640000 %
466.0 471.0
For epoch 159 	Accuracy on valid set: 72.100000 %
^CTraceback (most recent call last):
  File "master.py", line 323, in <module>
    
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "master.py", line 189, in forward
    t_sum, temp1, temp2, temp3 = 0, None, None, None
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "master.py", line 126, in forward
    t = t * Variable(self.mask_h, requires_grad=False).cuda()
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/autograd/variable.py", line 240, in cuda
    return CudaTransfer(device_id, async)(self)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/autograd/_functions/tensor.py", line 160, in forward
    return i.cuda(async=self.async)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/_utils.py", line 65, in _cuda
    return new_type(self.size()).copy_(self, async)
KeyboardInterrupt
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ python master.py 
Traceback (most recent call last):
  File "master.py", line 244, in <module>
    network = Net()
  File "master.py", line 179, in __init__
    self.highway_layers.append(nn.Conv2d(16*width, 32*width, stride=2, padding=1).cuda())
TypeError: __init__() takes at least 4 arguments (5 given)
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ python master.py 
Number of training examples : 10000
Traceback (most recent call last):
  File "master.py", line 272, in <module>
    l.prune(range(10), range(10, l.fan_out))
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 237, in __getattr__
    return object.__getattribute__(self, name)
AttributeError: 'Conv2d' object has no attribute 'prune'
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ python master.py 
Number of training examples : 10000
Traceback (most recent call last):
  File "master.py", line 274, in <module>
    network.highway_layers[l].prune(range(10), range(10, l.fan_out))
AttributeError: 'int' object has no attribute 'fan_out'
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ python master.py 
Number of training examples : 10000
Traceback (most recent call last):
  File "master.py", line 329, in <module>
    outputs, t_cost = network(Variable(train_x[cursor:min(cursor + batch_size, len(train_x))]))
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "master.py", line 191, in forward
    net, t = self.highway_layers[iii](net, train_mode=train_mode)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
TypeError: forward() got an unexpected keyword argument 'train_mode'
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ python master.py 
Number of training examples : 10000
Traceback (most recent call last):
  File "master.py", line 332, in <module>
    outputs, t_cost = network(Variable(train_x[cursor:min(cursor + batch_size, len(train_x))]))
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "master.py", line 194, in forward
    net, t = self.highway_layers[iii](net, train_mode=train_mode)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "master.py", line 123, in forward
    t = F.sigmoid(self.transform(h))
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/conv.py", line 237, in forward
    self.padding, self.dilation, self.groups)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/functional.py", line 39, in conv2d
    return f(input, weight, bias)
RuntimeError: CUDNN_STATUS_BAD_PARAM
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ python master.py 
Number of training examples : 10000
1
Traceback (most recent call last):
  File "master.py", line 333, in <module>
    outputs, t_cost = network(Variable(train_x[cursor:min(cursor + batch_size, len(train_x))]))
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "master.py", line 195, in forward
    net, t = self.highway_layers[iii](net, train_mode=train_mode)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "master.py", line 123, in forward
    t = F.sigmoid(self.transform(h))
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/conv.py", line 237, in forward
    self.padding, self.dilation, self.groups)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/functional.py", line 39, in conv2d
    return f(input, weight, bias)
RuntimeError: CUDNN_STATUS_BAD_PARAM
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ python master.py 
Number of training examples : 10000
(128L, 64L, 32L, 32L)
Traceback (most recent call last):
  File "master.py", line 333, in <module>
    outputs, t_cost = network(Variable(train_x[cursor:min(cursor + batch_size, len(train_x))]))
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "master.py", line 195, in forward
    net, t = self.highway_layers[iii](net, train_mode=train_mode)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "master.py", line 123, in forward
    t = F.sigmoid(self.transform(h))
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/conv.py", line 237, in forward
    self.padding, self.dilation, self.groups)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/functional.py", line 39, in conv2d
    return f(input, weight, bias)
RuntimeError: CUDNN_STATUS_BAD_PARAM
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ python master.py 
Number of training examples : 10000
(128L, 64L, 32L, 32L)
Traceback (most recent call last):
  File "master.py", line 333, in <module>
    outputs, t_cost = network(Variable(train_x[cursor:min(cursor + batch_size, len(train_x))]))
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "master.py", line 195, in forward
    net, t = self.highway_layers[iii](net, train_mode=train_mode)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "master.py", line 124, in forward
    t = F.sigmoid(self.transform(h))
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/conv.py", line 237, in forward
    self.padding, self.dilation, self.groups)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/functional.py", line 39, in conv2d
    return f(input, weight, bias)
RuntimeError: CUDNN_STATUS_BAD_PARAM
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ git pull
remote: Counting objects: 5, done.[K
remote: Compressing objects:  50% (1/2)   [Kremote: Compressing objects: 100% (2/2)   [Kremote: Compressing objects: 100% (2/2), done.[K
remote: Total 5 (delta 3), reused 5 (delta 3), pack-reused 0[K
Unpacking objects:  20% (1/5)   Unpacking objects:  40% (2/5)   Unpacking objects:  60% (3/5)   Unpacking objects:  80% (4/5)   Unpacking objects: 100% (5/5)   Unpacking objects: 100% (5/5), done.
From https://github.com/undercutspiky/CHN
   72da9e0..0d9f209  master     -> origin/master
Updating 72da9e0..0d9f209
error: Your local changes to the following files would be overwritten by merge:
	cifar_highway/run-1/master.py
Please, commit your changes or stash them before you can merge.
Aborting
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ rm master.py 
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ rm master.py [5Pgit pull
Updating 72da9e0..0d9f209
Fast-forward
 cifar_highway/run-1/master.py | 16 [32m++++++++[m[31m--------[m
 1 file changed, 8 insertions(+), 8 deletions(-)
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ git pullrm master.py [5Pgit pullpython master.py [3Prm screenlog.0python master.py [3Prm screenlog.0python master.py [9Pgit pullrm master.py [5Pgit pull[Kpython master.py 
Number of training examples : 10000
Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 17 layer: 9.460000 %
1478.0 2052.0
^CTraceback (most recent call last):
  File "master.py", line 319, in <module>
    #print('Accuracy on valid after pruning and training for 1 epoch %d layer onwards: %f %%' % (i, validate()))
  File "master.py", line 235, in validate
    outputs = network(Variable(valid_x[cursor:min(cursor + batch_size, len(valid_x))]), train_mode=False)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "master.py", line 191, in forward
    net, t = self.highway_layers[iii](net, train_mode=train_mode)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "master.py", line 123, in forward
    h = h * Variable(self.mask_h, requires_grad=False).cuda()
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/autograd/variable.py", line 240, in cuda
    return CudaTransfer(device_id, async)(self)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/autograd/_functions/tensor.py", line 160, in forward
    return i.cuda(async=self.async)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/_utils.py", line 65, in _cuda
    return new_type(self.size()).copy_(self, async)
KeyboardInterrupt
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ python master.py 
Number of training examples : 10000
Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
1369.0 1823.0
For epoch 1 	Accuracy on valid set: 16.410000 %
1093.0 1740.0
For epoch 2 	Accuracy on valid set: 28.110000 %
^CTraceback (most recent call last):
  File "master.py", line 327, in <module>
    outputs, t_cost = network(Variable(train_x[cursor:min(cursor + batch_size, len(train_x))]))
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "master.py", line 191, in forward
    net, t = self.highway_layers[iii](net, train_mode=train_mode)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/modules/module.py", line 206, in __call__
    result = self.forward(*input, **kwargs)
  File "master.py", line 123, in forward
    h = h * Variable(self.mask_h, requires_grad=False).cuda()
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/autograd/variable.py", line 240, in cuda
    return CudaTransfer(device_id, async)(self)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/autograd/_functions/tensor.py", line 160, in forward
    return i.cuda(async=self.async)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/_utils.py", line 65, in _cuda
    return new_type(self.size()).copy_(self, async)
KeyboardInterrupt
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ python master.py 
Number of training examples : 40000
1111.0 1813.0
For epoch 1 	Accuracy on valid set: 31.110000 %
1045.0 1493.0
For epoch 2 	Accuracy on valid set: 43.750000 %
1048.0 1217.0
For epoch 3 	Accuracy on valid set: 60.010000 %
1046.0 1196.0
For epoch 4 	Accuracy on valid set: 75.700000 %
1061.0 1187.0
For epoch 5 	Accuracy on valid set: 76.460000 %
1054.0 1177.0
For epoch 6 	Accuracy on valid set: 79.760000 %
1060.0 1181.0
For epoch 7 	Accuracy on valid set: 78.930000 %
1065.0 1148.0
For epoch 8 	Accuracy on valid set: 79.970000 %
1080.0 1156.0
For epoch 9 	Accuracy on valid set: 80.050000 %
1089.0 1163.0
For epoch 10 	Accuracy on valid set: 80.900000 %
1096.0 1168.0
For epoch 11 	Accuracy on valid set: 79.970000 %
1107.0 1163.0
For epoch 12 	Accuracy on valid set: 82.490000 %
1118.0 1168.0
For epoch 13 	Accuracy on valid set: 79.270000 %
1133.0 1177.0
For epoch 14 	Accuracy on valid set: 79.180000 %
1145.0 1182.0
For epoch 15 	Accuracy on valid set: 83.160000 %
1151.0 1185.0
For epoch 16 	Accuracy on valid set: 81.910000 %
1164.0 1202.0
For epoch 17 	Accuracy on valid set: 80.040000 %
1176.0 1206.0
For epoch 18 	Accuracy on valid set: 82.470000 %
1186.0 1220.0
For epoch 19 	Accuracy on valid set: 83.480000 %
1198.0 1227.0
For epoch 20 	Accuracy on valid set: 80.110000 %
964.0 1217.0
For epoch 21 	Accuracy on valid set: 80.960000 %
831.0 963.0
For epoch 22 	Accuracy on valid set: 79.600000 %
733.0 832.0
For epoch 23 	Accuracy on valid set: 82.000000 %
608.0 734.0
For epoch 24 	Accuracy on valid set: 81.590000 %
491.0 608.0
For epoch 25 	Accuracy on valid set: 82.200000 %
404.0 492.0
For epoch 26 	Accuracy on valid set: 78.770000 %
356.0 405.0
For epoch 27 	Accuracy on valid set: 81.770000 %
314.0 356.0
For epoch 28 	Accuracy on valid set: 80.150000 %
287.0 316.0
For epoch 29 	Accuracy on valid set: 79.380000 %
267.0 288.0
For epoch 30 	Accuracy on valid set: 82.850000 %
249.0 269.0
For epoch 31 	Accuracy on valid set: 80.960000 %
237.0 254.0
For epoch 32 	Accuracy on valid set: 81.590000 %
226.0 237.0
For epoch 33 	Accuracy on valid set: 80.680000 %
214.0 230.0
For epoch 34 	Accuracy on valid set: 77.610000 %
204.0 218.0
For epoch 35 	Accuracy on valid set: 81.020000 %
197.0 207.0
For epoch 36 	Accuracy on valid set: 77.810000 %
193.0 204.0
For epoch 37 	Accuracy on valid set: 74.460000 %
187.0 196.0
For epoch 38 	Accuracy on valid set: 67.710000 %
183.0 196.0
For epoch 39 	Accuracy on valid set: 77.220000 %
180.0 190.0
For epoch 40 	Accuracy on valid set: 71.090000 %
^CTraceback (most recent call last):
  File "master.py", line 334, in <module>
    nn.utils.clip_grad_norm(network.parameters(), 1.0)
  File "/home/dhananjay/tf/lib/python2.7/site-packages/torch/nn/utils/clip_grad.py", line 25, in clip_grad_norm
    param_norm = p.grad.data.norm(norm_type)
KeyboardInterrupt
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ git pull
remote: Counting objects: 6, done.[K
remote: Compressing objects:  33% (1/3)   [Kremote: Compressing objects:  66% (2/3)   [Kremote: Compressing objects: 100% (3/3)   [Kremote: Compressing objects: 100% (3/3), done.[K
remote: Total 6 (delta 3), reused 6 (delta 3), pack-reused 0[K
Unpacking objects:  16% (1/6)   Unpacking objects:  33% (2/6)   Unpacking objects:  50% (3/6)   Unpacking objects:  66% (4/6)   Unpacking objects:  83% (5/6)   Unpacking objects: 100% (6/6)   Unpacking objects: 100% (6/6), done.
From https://github.com/undercutspiky/CHN
   66b8c15..55383c6  master     -> origin/master
Updating 66b8c15..55383c6
Fast-forward
 cifar_highway/master.py       | 8 [32m++++++++[m
 cifar_highway/run-1/master.py | 6 [32m++++++[m
 2 files changed, 14 insertions(+)
(tf)dhananjay@o990:~/CHN/cifar_highway/run-1$ git pullpython master.py 
Number of training examples : 40000
1037.0 1959.0
For epoch 1 	Accuracy on valid set: 29.230000 %
1002.0 1282.0
For epoch 2 	Accuracy on valid set: 53.400000 %
1042.0 1190.0
For epoch 3 	Accuracy on valid set: 70.460000 %
1053.0 1184.0
For epoch 4 	Accuracy on valid set: 75.020000 %
1052.0 1169.0
For epoch 5 	Accuracy on valid set: 74.030000 %
1071.0 1171.0
For epoch 6 	Accuracy on valid set: 79.080000 %
1072.0 1168.0
For epoch 7 	Accuracy on valid set: 78.550000 %
1075.0 1158.0
For epoch 8 	Accuracy on valid set: 81.660000 %
1088.0 1153.0
For epoch 9 	Accuracy on valid set: 78.820000 %
1088.0 1149.0
For epoch 10 	Accuracy on valid set: 80.330000 %
1097.0 1147.0
For epoch 11 	Accuracy on valid set: 81.420000 %
1104.0 1153.0
For epoch 12 	Accuracy on valid set: 84.220000 %
1116.0 1156.0
For epoch 13 	Accuracy on valid set: 80.730000 %
1121.0 1177.0
For epoch 14 	Accuracy on valid set: 82.810000 %
1136.0 1169.0
For epoch 15 	Accuracy on valid set: 82.380000 %
1142.0 1183.0
For epoch 16 	Accuracy on valid set: 81.700000 %
1156.0 1189.0
For epoch 17 	Accuracy on valid set: 83.630000 %
1162.0 1201.0
For epoch 18 	Accuracy on valid set: 82.920000 %
1178.0 1217.0
For epoch 19 	Accuracy on valid set: 82.810000 %
1189.0 1226.0
For epoch 20 	Accuracy on valid set: 83.530000 %
952.0 1203.0
For epoch 21 	Accuracy on valid set: 83.810000 %
793.0 952.0
For epoch 22 	Accuracy on valid set: 79.610000 %
661.0 792.0
For epoch 23 	Accuracy on valid set: 83.950000 %
547.0 662.0
For epoch 24 	Accuracy on valid set: 81.960000 %
441.0 548.0
For epoch 25 	Accuracy on valid set: 81.200000 %
373.0 440.0
For epoch 26 	Accuracy on valid set: 82.020000 %
325.0 373.0
For epoch 27 	Accuracy on valid set: 78.690000 %
293.0 327.0
For epoch 28 	Accuracy on valid set: 76.990000 %
271.0 295.0
For epoch 29 	Accuracy on valid set: 82.390000 %
253.0 274.0
For epoch 30 	Accuracy on valid set: 80.270000 %
241.0 256.0
For epoch 31 	Accuracy on valid set: 81.750000 %
231.0 245.0
For epoch 32 	Accuracy on valid set: 80.290000 %
221.0 234.0
For epoch 33 	Accuracy on valid set: 79.760000 %
213.0 224.0
For epoch 34 	Accuracy on valid set: 81.870000 %
204.0 216.0
For epoch 35 	Accuracy on valid set: 78.660000 %
198.0 208.0
For epoch 36 	Accuracy on valid set: 82.770000 %
192.0 204.0
For epoch 37 	Accuracy on valid set: 73.270000 %
189.0 199.0
For epoch 38 	Accuracy on valid set: 75.600000 %
184.0 193.0
For epoch 39 	Accuracy on valid set: 82.940000 %
180.0 190.0
For epoch 40 	Accuracy on valid set: 74.130000 %
177.0 187.0
For epoch 41 	Accuracy on valid set: 80.290000 %
174.0 183.0
For epoch 42 	Accuracy on valid set: 80.070000 %
170.0 181.0
For epoch 43 	Accuracy on valid set: 81.690000 %
168.0 174.0
For epoch 44 	Accuracy on valid set: 80.330000 %
166.0 174.0
For epoch 45 	Accuracy on valid set: 82.100000 %
163.0 171.0
For epoch 46 	Accuracy on valid set: 81.450000 %
159.0 171.0
For epoch 47 	Accuracy on valid set: 78.820000 %
159.0 167.0
For epoch 48 	Accuracy on valid set: 76.890000 %
159.0 168.0
For epoch 49 	Accuracy on valid set: 74.380000 %
158.0 168.0
For epoch 50 	Accuracy on valid set: 79.050000 %
156.0 164.0
For epoch 51 	Accuracy on valid set: 76.330000 %
152.0 164.0
For epoch 52 	Accuracy on valid set: 80.880000 %
152.0 162.0
For epoch 53 	Accuracy on valid set: 82.050000 %
150.0 158.0
For epoch 54 	Accuracy on valid set: 81.250000 %
150.0 159.0
For epoch 55 	Accuracy on valid set: 81.900000 %
148.0 156.0
For epoch 56 	Accuracy on valid set: 76.500000 %
147.0 154.0
For epoch 57 	Accuracy on valid set: 76.440000 %
147.0 155.0
For epoch 58 	Accuracy on valid set: 81.390000 %
144.0 156.0
For epoch 59 	Accuracy on valid set: 80.870000 %
145.0 155.0
For epoch 60 	Accuracy on valid set: 79.710000 %
142.0 150.0
For epoch 61 	Accuracy on valid set: 80.970000 %
142.0 150.0
For epoch 62 	Accuracy on valid set: 77.150000 %
140.0 149.0
For epoch 63 	Accuracy on valid set: 81.180000 %
140.0 149.0
For epoch 64 	Accuracy on valid set: 73.630000 %
139.0 149.0
For epoch 65 	Accuracy on valid set: 74.060000 %
138.0 148.0
For epoch 66 	Accuracy on valid set: 82.090000 %
139.0 147.0
For epoch 67 	Accuracy on valid set: 80.450000 %
137.0 145.0
For epoch 68 	Accuracy on valid set: 79.610000 %
136.0 145.0
For epoch 69 	Accuracy on valid set: 81.270000 %
135.0 143.0
For epoch 70 	Accuracy on valid set: 79.620000 %
137.0 143.0
For epoch 71 	Accuracy on valid set: 83.630000 %
135.0 143.0
For epoch 72 	Accuracy on valid set: 73.460000 %
134.0 141.0
For epoch 73 	Accuracy on valid set: 75.180000 %
133.0 140.0
For epoch 74 	Accuracy on valid set: 76.130000 %
130.0 142.0
For epoch 75 	Accuracy on valid set: 77.400000 %
132.0 140.0
For epoch 76 	Accuracy on valid set: 76.180000 %
131.0 137.0
For epoch 77 	Accuracy on valid set: 81.070000 %
130.0 139.0
For epoch 78 	Accuracy on valid set: 79.570000 %
127.0 138.0
For epoch 79 	Accuracy on valid set: 80.170000 %
109.0 138.0
For epoch 80 	Accuracy on valid set: 88.350000 %
94.0 109.0
For epoch 81 	Accuracy on valid set: 88.330000 %
85.0 94.0
For epoch 82 	Accuracy on valid set: 88.400000 %
80.0 86.0
For epoch 83 	Accuracy on valid set: 88.270000 %
76.0 80.0
For epoch 84 	Accuracy on valid set: 88.330000 %
72.0 76.0
For epoch 85 	Accuracy on valid set: 87.840000 %
70.0 73.0
For epoch 86 	Accuracy on valid set: 88.140000 %
67.0 71.0
For epoch 87 	Accuracy on valid set: 87.680000 %
66.0 68.0
For epoch 88 	Accuracy on valid set: 87.990000 %
64.0 67.0
For epoch 89 	Accuracy on valid set: 87.930000 %
63.0 65.0
For epoch 90 	Accuracy on valid set: 87.610000 %
62.0 63.0
For epoch 91 	Accuracy on valid set: 87.570000 %
61.0 63.0
For epoch 92 	Accuracy on valid set: 87.640000 %
60.0 61.0
For epoch 93 	Accuracy on valid set: 87.460000 %
59.0 60.0
For epoch 94 	Accuracy on valid set: 87.240000 %
58.0 60.0
For epoch 95 	Accuracy on valid set: 87.520000 %
57.0 59.0
For epoch 96 	Accuracy on valid set: 87.630000 %
56.0 58.0
For epoch 97 	Accuracy on valid set: 87.150000 %
56.0 58.0
For epoch 98 	Accuracy on valid set: 87.570000 %
55.0 57.0
For epoch 99 	Accuracy on valid set: 87.040000 %
55.0 56.0
For epoch 100 	Accuracy on valid set: 87.280000 %
54.0 56.0
For epoch 101 	Accuracy on valid set: 86.930000 %
54.0 55.0
For epoch 102 	Accuracy on valid set: 87.280000 %
53.0 54.0
For epoch 103 	Accuracy on valid set: 87.530000 %
52.0 54.0
For epoch 104 	Accuracy on valid set: 86.860000 %
52.0 54.0
For epoch 105 	Accuracy on valid set: 87.390000 %
52.0 54.0
For epoch 106 	Accuracy on valid set: 86.460000 %
52.0 53.0
For epoch 107 	Accuracy on valid set: 87.100000 %
51.0 53.0
For epoch 108 	Accuracy on valid set: 86.330000 %
51.0 52.0
For epoch 109 	Accuracy on valid set: 86.650000 %
50.0 52.0
For epoch 110 	Accuracy on valid set: 87.000000 %
50.0 52.0
For epoch 111 	Accuracy on valid set: 86.410000 %
50.0 51.0
For epoch 112 	Accuracy on valid set: 85.840000 %
50.0 51.0
For epoch 113 	Accuracy on valid set: 86.970000 %
49.0 51.0
For epoch 114 	Accuracy on valid set: 87.130000 %
49.0 50.0
For epoch 115 	Accuracy on valid set: 86.040000 %
49.0 50.0
For epoch 116 	Accuracy on valid set: 86.710000 %
49.0 50.0
For epoch 117 	Accuracy on valid set: 85.170000 %
48.0 50.0
For epoch 118 	Accuracy on valid set: 86.790000 %
48.0 50.0
For epoch 119 	Accuracy on valid set: 85.660000 %
48.0 49.0
For epoch 120 	Accuracy on valid set: 87.630000 %
48.0 49.0
For epoch 121 	Accuracy on valid set: 87.530000 %
48.0 49.0
For epoch 122 	Accuracy on valid set: 87.590000 %
47.0 49.0
For epoch 123 	Accuracy on valid set: 87.530000 %
47.0 48.0
For epoch 124 	Accuracy on valid set: 87.400000 %
47.0 48.0
For epoch 125 	Accuracy on valid set: 87.460000 %
47.0 48.0
For epoch 126 	Accuracy on valid set: 87.480000 %
47.0 48.0
For epoch 127 	Accuracy on valid set: 87.480000 %
47.0 48.0
For epoch 128 	Accuracy on valid set: 87.430000 %
47.0 48.0
For epoch 129 	Accuracy on valid set: 87.270000 %
47.0 47.0
For epoch 130 	Accuracy on valid set: 87.390000 %
47.0 47.0
For epoch 131 	Accuracy on valid set: 87.280000 %
47.0 47.0
For epoch 132 	Accuracy on valid set: 87.360000 %
46.0 47.0
For epoch 133 	Accuracy on valid set: 87.320000 %
46.0 47.0
For epoch 134 	Accuracy on valid set: 87.370000 %
46.0 47.0
For epoch 135 	Accuracy on valid set: 87.360000 %
46.0 47.0
For epoch 136 	Accuracy on valid set: 87.240000 %
46.0 47.0
For epoch 137 	Accuracy on valid set: 87.300000 %
46.0 47.0
For epoch 138 	Accuracy on valid set: 87.220000 %
46.0 47.0
For epoch 139 	Accuracy on valid set: 87.290000 %
46.0 47.0
For epoch 140 	Accuracy on valid set: 87.310000 %
46.0 47.0
For epoch 141 	Accuracy on valid set: 87.290000 %
46.0 47.0
For epoch 142 	Accuracy on valid set: 87.450000 %
46.0 47.0
For epoch 143 	Accuracy on valid set: 87.430000 %
46.0 47.0
For epoch 144 	Accuracy on valid set: 87.220000 %
46.0 47.0
For epoch 145 	Accuracy on valid set: 87.280000 %
46.0 47.0
For epoch 146 	Accuracy on valid set: 87.270000 %
46.0 47.0
For epoch 147 	Accuracy on valid set: 87.350000 %
46.0 46.0
For epoch 148 	Accuracy on valid set: 87.230000 %
45.0 46.0
For epoch 149 	Accuracy on valid set: 87.320000 %
Conv2d(256, 23, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 17 layer: 84.460000 %
48.0 49.0
Accuracy on valid after pruning and training for 1 epoch 17 layer onwards: 85.650000 %
Conv2d(256, 49, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 16 layer: 54.640000 %
65.0 67.0
Accuracy on valid after pruning and training for 1 epoch 16 layer onwards: 85.360000 %
Conv2d(256, 54, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 15 layer: 10.220000 %
82.0 84.0
Accuracy on valid after pruning and training for 1 epoch 15 layer onwards: 86.020000 %
Conv2d(256, 61, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 14 layer: 15.680000 %
102.0 104.0
Accuracy on valid after pruning and training for 1 epoch 14 layer onwards: 85.890000 %
Conv2d(256, 167, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 13 layer: 10.220000 %
121.0 124.0
Accuracy on valid after pruning and training for 1 epoch 13 layer onwards: 83.720000 %
Conv2d(128, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 11 layer: 19.800000 %
126.0 128.0
Accuracy on valid after pruning and training for 1 epoch 11 layer onwards: 81.170000 %
Conv2d(128, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 10 layer: 10.720000 %
129.0 132.0
Accuracy on valid after pruning and training for 1 epoch 10 layer onwards: 82.160000 %
Conv2d(128, 62, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 9 layer: 10.030000 %
144.0 146.0
Accuracy on valid after pruning and training for 1 epoch 9 layer onwards: 79.260000 %
Conv2d(128, 82, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 8 layer: 10.220000 %
160.0 162.0
Accuracy on valid after pruning and training for 1 epoch 8 layer onwards: 73.540000 %
Conv2d(128, 126, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 7 layer: 30.850000 %
161.0 163.0
Accuracy on valid after pruning and training for 1 epoch 7 layer onwards: 75.800000 %
Conv2d(64, 58, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 5 layer: 10.220000 %
163.0 165.0
Accuracy on valid after pruning and training for 1 epoch 5 layer onwards: 78.180000 %
Conv2d(64, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 4 layer: 11.160000 %
165.0 167.0
Accuracy on valid after pruning and training for 1 epoch 4 layer onwards: 78.180000 %
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 3 layer: 78.180000 %
165.0 167.0
Accuracy on valid after pruning and training for 1 epoch 3 layer onwards: 79.640000 %
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 2 layer: 79.640000 %
165.0 167.0
Accuracy on valid after pruning and training for 1 epoch 2 layer onwards: 80.300000 %
Conv2d(64, 63, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Accuracy on valid set after pruning 1 layer: 33.810000 %
166.0 168.0
Accuracy on valid after pruning and training for 1 epoch 1 layer onwards: 81.020000 %
166.0 168.0
For epoch 150 	Accuracy on valid set: 83.580000 %
